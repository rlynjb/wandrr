<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>wandrr.io</title>
    <description>This is a blog about travel and tech.
</description>
    <link>http://www.wandrr.io/</link>
    <atom:link href="http://www.wandrr.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 29 Jan 2016 16:19:16 -0800</pubDate>
    <lastBuildDate>Fri, 29 Jan 2016 16:19:16 -0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Front-End Workflow with Wordpress</title>
        <description>&lt;p&gt;Prototyping and delivering an end product is one of the things I’ve been contemplating lately.
Being the only designer at work and yet, the one responsible for optimization and performance of Wordpress theme used, I have to find a way to satisfy both design and development.&lt;/p&gt;

&lt;p&gt;Below are my usual workflow.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Gather requirements:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;What kind of website would it be?&lt;/li&gt;
      &lt;li&gt;Is there a sitemap or diagram provided?&lt;/li&gt;
      &lt;li&gt;How many regular pages will it contain?&lt;/li&gt;
      &lt;li&gt;What are their brand color scheme?&lt;/li&gt;
      &lt;li&gt;What’s their choice of font/s?&lt;/li&gt;
      &lt;li&gt;Where can I access their existing assets, images, etc.&lt;/li&gt;
      &lt;li&gt;Are there sample websites they like?&lt;/li&gt;
      &lt;li&gt;Do they have an existing website?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are atleast the initial questions that come to mind when gathering requirements.
Another one would be &lt;strong&gt;planning it out&lt;/strong&gt;. At this phase, I will have to satisfy both our:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Project Manager&lt;/em&gt;
    &lt;ul&gt;
      &lt;li&gt;Making sure I can deliver prototypes or layout design base from the gathered requirements.&lt;/li&gt;
      &lt;li&gt;Meet deadline.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Senior Backend Developer/Engineer&lt;/em&gt;
    &lt;ul&gt;
      &lt;li&gt;Making sure I use modern technology, prefer opensource (MIT License).
        &lt;ul&gt;
          &lt;li&gt;Github.com will be your bestfriend on this :)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Use a theme that makes minimal http requests. This is usually up to me on how I build the dependencies/assets.&lt;/li&gt;
      &lt;li&gt;Convert some pages of wordpress to serve static page.
        &lt;ul&gt;
          &lt;li&gt;Example would be 404 page, convert it to static page so it doesn’t need to make a request to DB often.&lt;/li&gt;
          &lt;li&gt;Wordpress has its way of doing alot of DB queries. Consider minimizing DB queries.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Use minimal plugins as possible. If there is a way to use default Wordpress features, take advantage of it.&lt;/li&gt;
      &lt;li&gt;When deploying, make sure to set Wordpress securities
        &lt;ul&gt;
          &lt;li&gt;Wordpress Hardening documentation&lt;/li&gt;
          &lt;li&gt;Wordpress Editing wp-config.php documentation&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Also, consider other developers&lt;/em&gt;
    &lt;ul&gt;
      &lt;li&gt;Make sure I use a documented theme so other developers can jump on the project as well.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now with these rules in set. I have come to a conclusion to use &lt;a href=&quot;https://foundationpress.olefredrik.com/&quot;&gt;&lt;strong&gt;FoundationPress&lt;/strong&gt;&lt;/a&gt;.
We have used paid themes in the past, but the extra features included requires frequent update, no control over assets (HTTP requests) of theme, and in the long run, may not be performant. Also some themes, eventhough configurations was made easy for non-techie users, it makes alot of cpu processes and  database queries. Unnecessary features in theme and plugin dependencies may also become vulnerable to security attacks, bots injecting scripts unto Wordpress directories.
Rather than configuring themes and some plugins in wordpress admin dashboard, its recommended to do so in wordpress source files instead.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;why-choose-foundationpress&quot;&gt;Why choose FoundationPress?&lt;/h3&gt;

&lt;p&gt;FoundationPress is basically Zurb Foundation framework, but created specifically to work with Wordpress as a theme.
I’ve been using Zurb Foundation for quite sometime, and with the recent upgrade they made on their framework, its more flexible on how we can include or exclude certain features of what builds a Responsive Website or Web Application, thus, customization of dependencies/assets and small filesize. Also, this framework is well-documented and support from its community is pretty responsive, I would file issues on their github repo and they are very helpful to resolve issues.&lt;/p&gt;

&lt;p&gt;With regards to CSS Animations (yes, I’ve see trends lately where when you scroll a webpage, it would have those nifty animations), Foundation has released &lt;strong&gt;Motion-UI&lt;/strong&gt; which is also included on FoundationPress.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://foundation.zurb.com/&quot;&gt;Foundation Zurb&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/olefredrik/foundationpress&quot;&gt;FoundationPress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With the type of projects we received and working with only a few developers while meeting design approval and deadline, using a CSS framework is just proper.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I don’t need to re-code CSS styles. Good for rapid prototyping and optimize later.&lt;/li&gt;
  &lt;li&gt;There are also pre-made JavaScript components. Again, good for rapid prototyping and optimize later.&lt;/li&gt;
  &lt;li&gt;Documentation is on Zurb Foundation website, except custom documentation.&lt;/li&gt;
  &lt;li&gt;FoundationPress handles the theme’s architecture.
    &lt;ul&gt;
      &lt;li&gt;Just by looking at &lt;strong&gt;package.json&lt;/strong&gt;, &lt;strong&gt;bower.json&lt;/strong&gt;, and &lt;strong&gt;gulp.js&lt;/strong&gt;, I can tell how the theme is architectured.&lt;/li&gt;
      &lt;li&gt;Except for SASS files. Its modules, settings, and dependencies are imported different than JavaScript files.&lt;/li&gt;
      &lt;li&gt;Motion-UI is still early in development and a bit tricky to implement, but I filed an issue related to setup. &lt;a href=&quot;https://github.com/zurb/motion-ui/issues/56&quot;&gt;Visit filed issue here&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;wordpress-templating&quot;&gt;Wordpress Templating&lt;/h3&gt;

&lt;p&gt;To differentiate the files in FoundationPress, its good to get acquainted with &lt;a href=&quot;https://developer.wordpress.org/themes/basics/template-files/&quot;&gt;Wordpress Template Files&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prototyping&lt;/strong&gt; is easy as adding a page on wordpress admin dashboard and create an instance of a &lt;code&gt;page.tpl&lt;/code&gt; file and renaming with a given extension of the name of the page you added on wordpress admin dashboard &lt;code&gt;page-{slug}.php&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another technique is if you were to use an &lt;strong&gt;approved design prototype&lt;/strong&gt; to multiple pages, you can just convert that &lt;code&gt;page-{slug}.php&lt;/code&gt; file into a template &lt;code&gt;/FoundationPress/templates/template-name-here.php&lt;/code&gt;, then disseminate it by setting it as a Template under &lt;code&gt;Name of page you added &amp;gt; Page Attributes &amp;gt; Template&lt;/code&gt; at wp admin dashboard.&lt;/p&gt;

&lt;p&gt;There are many ways you can fully customized a CMS like functionality with wordpress without the need of plugin. All you have to do is enable these features in &lt;code&gt;functions.php&lt;/code&gt;.
Some features that are worth noting are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Custom Post Type&lt;/li&gt;
  &lt;li&gt;Custom Category and Tags&lt;/li&gt;
  &lt;li&gt;Custom Fields&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also create a template or prototype for these Custom Post Types. Enable Custom Fields if required for users to input pieces of data and enable Custom Category if you want to sort or filter these items in theme or in wordpress admin custom post type dashboard.&lt;/p&gt;
</description>
        <pubDate>Fri, 29 Jan 2016 04:07:09 -0800</pubDate>
        <link>http://www.wandrr.io/Front-End-workflow-with-Wordpress</link>
        <guid isPermaLink="true">http://www.wandrr.io/Front-End-workflow-with-Wordpress</guid>
        
        <category>wordpress</category>
        
        <category>prototyping</category>
        
        
      </item>
    
      <item>
        <title>Wordpress Security Cheatsheet</title>
        <description>&lt;p&gt;wordpress cli:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://wp-cli.org/&quot;&gt;wp-cli.org&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://codex.wordpress.org/Hardening_WordPress&quot;&gt;Hardening Wordpress&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://codex.wordpress.org/Editing_wp-config.php#Disable_Plugin_and_Theme_Update_and_Installation&quot;&gt;Disable Plugin and Theme Update and Installation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 29 Jan 2016 02:47:13 -0800</pubDate>
        <link>http://www.wandrr.io/Wordpress-Security-Cheatsheet</link>
        <guid isPermaLink="true">http://www.wandrr.io/Wordpress-Security-Cheatsheet</guid>
        
        <category>wordpress</category>
        
        <category>security</category>
        
        
      </item>
    
      <item>
        <title>Describe event bubbling</title>
        <description>
</description>
        <pubDate>Fri, 29 Jan 2016 02:47:13 -0800</pubDate>
        <link>http://www.wandrr.io/Describe-event-bubbling</link>
        <guid isPermaLink="true">http://www.wandrr.io/Describe-event-bubbling</guid>
        
        <category>javascript</category>
        
        <category>interview question</category>
        
        
      </item>
    
      <item>
        <title>Explain 'hoisting'</title>
        <description>&lt;p&gt;As defined in dictionary.com, Hoisting means to lift or raise. &lt;strong&gt;In JavaScript&lt;/strong&gt;, Hoisting is when we declare variables and are hoisted to the top of a function scope or to the top of the global scope depending on where it is declared. Remember, JavaScript have a &lt;strong&gt;function-level scope&lt;/strong&gt; as oppose to &lt;strong&gt;block-level scope&lt;/strong&gt; in other languages.&lt;/p&gt;

&lt;p&gt;** &lt;em&gt;Note, we must first understand the concept of JavaScript Variable Scope as this is the basis of Hoisting&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;variable-hoisting&quot;&gt;Variable Hoisting&lt;/h3&gt;

&lt;p&gt;Only &lt;strong&gt;variable declarations&lt;/strong&gt; are hoisted to the top and not &lt;strong&gt;variable initializations&lt;/strong&gt; (variable assignments or variables with assigned values).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;First example,&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;  just a simple function declaration.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;  this function declaration has its own scope.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;  we are not declaring variables on global scope (outside of function)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;*/&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;showBar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;1st word &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// output: undefined&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    Reason why its &amp;#39;undefined&amp;#39; is we did not declare&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    a variable called &amp;#39;foo&amp;#39; before we called it.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    It cannot find variable foo.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;  */&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// yey, we finally declared it&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;2nd word &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// output: bar&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    Since we declared variable &amp;#39;foo&amp;#39; after we called it.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    It now finds variable foo.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;  */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;showBar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;  console output:&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;  1st word undefined&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;  2nd word bar&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;*/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Second example,&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;  same function declaration, but different Hoisting example&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;*/&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;showBar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    here, we declared variable &amp;#39;foo&amp;#39; first, and is&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    located at the very top of function (Hoisting)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;  */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;1st word &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// output: undefined&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    still outputs &amp;#39;undefined&amp;#39;, why?&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    eventhough we declared variable foo after we called it,&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    variable foo doesn&amp;#39;t hold any value.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    its just a variable declaration without a value.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;  */&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    here, we are now assigning variable &amp;#39;foo&amp;#39; with a string value.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    though, variable assignments aren&amp;#39;t hosted. that is why&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    our 1st word display is outputting undefined.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;  */&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;2nd word &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// output: bar&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    since we assigned a value to variable foo.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    it now has a value to display&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;  */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;showBar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;  console output:&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;  1st word undefined&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;  2nd word bar&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;*/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;function-declarations-overrides-variables-declaration-when-hoisted&quot;&gt;Function Declarations Overrides Variables Declaration When Hoisted&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Function declarations&lt;/strong&gt; and &lt;strong&gt;variables declarations&lt;/strong&gt; will always be hoisted at the top of scope.&lt;br /&gt;
&lt;strong&gt;Function declarations&lt;/strong&gt; will always override &lt;strong&gt;variable declarations&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// output: function&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;although, &lt;strong&gt;variable declarations&lt;/strong&gt; will override &lt;strong&gt;function declarations&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;buzz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// output: string&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Function expressions&lt;/strong&gt; (function assignments) as well as &lt;strong&gt;variable initialization&lt;/strong&gt; (variable assignments) are not hoisted.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;qux&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;buzz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Also good to note that,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In strict mode, an error will occur if you assign a variable a value without first declaring the variable. Always declare your variables.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;references&quot;&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://javascriptissexy.com/javascript-variable-scope-and-hoisting-explained/&quot;&gt;JavaScript Variable Scope and Hosting Explained&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 28 Jan 2016 05:27:00 -0800</pubDate>
        <link>http://www.wandrr.io/JS-Interview-Explain-hoisting</link>
        <guid isPermaLink="true">http://www.wandrr.io/JS-Interview-Explain-hoisting</guid>
        
        <category>javascript</category>
        
        <category>interview question</category>
        
        
      </item>
    
      <item>
        <title>Useful techniques for configuring and managing server</title>
        <description>&lt;p&gt;Below is a gist of what this post contains.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Some Server stuff techniques&lt;/li&gt;
  &lt;li&gt;Benefits of checking /var/log/&lt;/li&gt;
  &lt;li&gt;Checking for CPU or Port processes&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;some-server-stuff-techniques&quot;&gt;Some Server stuff techniques&lt;/h3&gt;

&lt;h4 id=&quot;php-and-apache2&quot;&gt;&lt;strong&gt;PHP and Apache2&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;To check a website’s php info: &lt;br /&gt;
You can use either cli command &lt;code&gt;php&lt;/code&gt; or create a file with phpinfo().&lt;br /&gt;
Former solution will check for system wide php info.&lt;br /&gt;
Latter solution will check specific site php info.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;create a &lt;code&gt;foo.php&lt;/code&gt; file&lt;/li&gt;
  &lt;li&gt;add ff code `&lt;?php phpinfo(); ?&gt;&lt;/li&gt;
  &lt;li&gt;visit url ‘your-domain.com/foo.php’ and this will display all php configs on a specific website&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Sample uses&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When updating a &lt;code&gt;php.ini&lt;/code&gt; file and you want to see what a specific website is using. Because there can be multiple &lt;code&gt;php.ini&lt;/code&gt; file somewhere.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;npm-and-nodejs&quot;&gt;&lt;strong&gt;NPM and Nodejs&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Use NVM when managing different nodejs and npm versions on a server. Saves time!&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;benefits-of-checking-varlog&quot;&gt;Benefits of checking /var/log/&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Sample uses&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Monitor a certain IP address activity hitting your server or certain file&lt;/li&gt;
  &lt;li&gt;Monitor suspicious IP address activity&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;checking-for-cpu-or-port-processes&quot;&gt;Checking for CPU or Port processes&lt;/h3&gt;

&lt;p&gt;Use &lt;code&gt;htop&lt;/code&gt; or &lt;code&gt;top&lt;/code&gt; commands&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;htop&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;top&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check for an open port by &lt;code&gt;ps aux | grep jekyll&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Kill a process or port by &lt;code&gt;kill -9 PID#&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 28 Jan 2016 02:47:13 -0800</pubDate>
        <link>http://www.wandrr.io/Useful-techniques-for-configuring-managing-server</link>
        <guid isPermaLink="true">http://www.wandrr.io/Useful-techniques-for-configuring-managing-server</guid>
        
        <category>linux</category>
        
        <category>commandline</category>
        
        
      </item>
    
      <item>
        <title>Useful commands for navigating directories</title>
        <description>&lt;p&gt;Below is a gist of what this post contains.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Chaging user accounts&lt;/li&gt;
  &lt;li&gt;Commands for searching&lt;/li&gt;
  &lt;li&gt;Commands for sorting files&lt;/li&gt;
  &lt;li&gt;Opening files&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;changing-user-accounts&quot;&gt;Changing user accounts&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.ubuntu.com/community/RootSudo&quot;&gt;sudo su commands&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;commands-for-searching&quot;&gt;Commands for searching&lt;/h3&gt;

&lt;p&gt;These are just a list of commands I find usefule when searching for text or files thoughout Linux system.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.ubuntu.com/community/find&quot;&gt;find&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;locate&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.ubuntu.com/community/grep&quot;&gt;grep&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Sample uses&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Searching for a file throughout the system&lt;/li&gt;
  &lt;li&gt;Searching for a keyword though a directory&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;references&quot;&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-use-find-and-locate-to-search-for-files-on-a-linux-vps&quot;&gt;How To Use Find and Locate to Search for Files on a Linux VPS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;commands-for-sorting-files&quot;&gt;Commands for sorting files&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;ls&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;ll&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Sample uses&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sort files in date &lt;code&gt;ll -tr&lt;/code&gt; to check which files has been modified recently&lt;/li&gt;
  &lt;li&gt;Check for any suspicious injected files&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;security-file-permissions&quot;&gt;Security File Permissions&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.ubuntu.com/community/FilePermissions&quot;&gt;Understanding and Using File Permissions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;opening-files&quot;&gt;Opening files&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;vim&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;nano&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;cat&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;head&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;tail&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;VIM - remembering important features&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;:set tabstop=2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;:set nu&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 28 Jan 2016 02:47:13 -0800</pubDate>
        <link>http://www.wandrr.io/Useful-commands-for-navigating-directories</link>
        <guid isPermaLink="true">http://www.wandrr.io/Useful-commands-for-navigating-directories</guid>
        
        <category>linux</category>
        
        <category>commandline</category>
        
        
      </item>
    
      <item>
        <title>Have you ever used JavaScript templating?</title>
        <description>&lt;h3 id=&quot;have-you-ever-used-javascript-templating-if-so-what-libraries-have-you-used&quot;&gt;Have you ever used JavaScript templating? If so, what libraries have you used?&lt;/h3&gt;

&lt;p&gt;Yes, I have used a JavaScript templating engines.&lt;/p&gt;

&lt;p&gt;Libraries I first used was Handlebars.js because it was a dependency for previous Ember.js versions.&lt;/p&gt;

&lt;p&gt;But then, our team decided to replace Handlebars.js with Emblem since the syntax on Emblem is much cleaner. It resembles to coding with Ruby.&lt;/p&gt;

&lt;p&gt;When Ember.js started to release updates on their core versions, we then started to use what the recent Ember.js provides as it is no more a dependency rather is part of the Ember.js core. Their template engine is HTMLBars&lt;/p&gt;
</description>
        <pubDate>Wed, 27 Jan 2016 01:47:13 -0800</pubDate>
        <link>http://www.wandrr.io/JS-Interview-Question-Have-you-ever-used-JavaScript-templating</link>
        <guid isPermaLink="true">http://www.wandrr.io/JS-Interview-Question-Have-you-ever-used-JavaScript-templating</guid>
        
        <category>javascript</category>
        
        <category>interview question</category>
        
        
      </item>
    
      <item>
        <title>Explain how JSONP works (and how it's not really AJAX)</title>
        <description>&lt;h3 id=&quot;explain-how-jsonp-works-and-how-its-not-really-ajax&quot;&gt;Explain how JSONP works (and how it’s not really AJAX).&lt;/h3&gt;

&lt;p&gt;JSONP (acronym for JavaScript Object Notation with Padding) is a common method to retrieve data from another domain and bypass CORS (Cross Origin Resource Sharing) rules.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;An overview of JSONP base on personal experience&lt;/strong&gt;&lt;br /&gt;
I have used JSONP as a work around to get data by wrapping the response data in JSON format with a function callback set in query string as parameter and setting the callback as an object property of ajax object.&lt;/p&gt;

&lt;p&gt;** &lt;em&gt;Note, I was using jQuery library when implementing AJAX with JSONP&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I’ve also heard of CORS as a set of rules regarding retrieving and transferring data or assets from 3rd parties or different domains from a client. This strictly applies to XMLHttpRequest for security reasons. Making HTTP Requests with XMLHTTPRequest object will only let us make request to our own domain and restricts us from different domain, thus, JSONP was created as a way to bypass this rule.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS&quot;&gt;More about CORS: HTTP access control (CORS)&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;How does JSONP work?&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;After reading further, implementation of JSONP differ from JavaScript libraries to the actual native JavaScript.
In native JavaScript, JSONP requests aren’t dispatched with XMLHttpRequest object, rather, a &lt;code&gt;script&lt;/code&gt; tag is added to the DOM, targeting its &lt;code&gt;src&lt;/code&gt; attribute with the url. Reason is &lt;code&gt;script&lt;/code&gt; tag does not have limitation to which domains it can retrieve its scripts from.
Also, since JavaScript has a global scope, we can reference a function to handle incoming JSON data from a 3rd party api url and link that to our application.
While, in JavaScript libraries such as jQuery, it automatically generate callback and clean up any inserted &lt;code&gt;script&lt;/code&gt; tags unto the DOM.&lt;/p&gt;

&lt;p&gt;In order for JSON data to be wrapped in a function, the 3rd party API service needs to support JSONP feature. Usually, they will specify on their documentation how to implement JSONP. &lt;a href=&quot;http://forismatic.com/en/api/&quot;&gt;Here is an example: http://forismatic.com/en/api/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you copy &amp;amp; paste the url below, this will return a simple quote formatted in JSON&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;http://api.forismatic.com/api/1.0/?method=getQuote&amp;amp;lang=en&amp;amp;format=json&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While this url will return the same result except JSON data will be wrapped with a function since we explicitly specify format as jsonp and gave it a callback function&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;http://api.forismatic.com/api/1.0/?method=getQuote&amp;amp;lang=en&amp;amp;format=jsonp&amp;amp;jsonp=processQuote&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When this loads unto our application from &lt;code&gt;script&lt;/code&gt; tag, the given callback name (function name) will get registered unto the global scope and will be available for us to use throughout our application.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;JSONP limits us with just retrieving &lt;code&gt;GET&lt;/code&gt; data. It does not let us create, update, or delete &lt;code&gt;CRUD&lt;/code&gt; data. That’s why its just a work around but it does have its advantages. For example, retrieving simple data from a weather api, etc. If you want to take advantage of these other HTTP methods, then its best to build your own simple API Server.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;references&quot;&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://johnnywey.wordpress.com/2012/05/20/jsonp-how-does-it-work/&quot;&gt;JSONP How does it work&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 26 Jan 2016 02:47:13 -0800</pubDate>
        <link>http://www.wandrr.io/JS-Interview-Question-Explain-how-JSONP-works</link>
        <guid isPermaLink="true">http://www.wandrr.io/JS-Interview-Question-Explain-how-JSONP-works</guid>
        
        <category>javascript</category>
        
        <category>interview question</category>
        
        
      </item>
    
      <item>
        <title>Explain AJAX in as much detail as possible</title>
        <description>&lt;h3 id=&quot;explain-ajax-in-as-much-detail-as-possible&quot;&gt;Explain AJAX in as much detail as possible&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Overview&lt;/strong&gt; &lt;br /&gt;
AJAX is a way to communicate to the server without reloading the page. Once we receive the data from the server, we can then manipulate those data and display unto certain parts of the page, this is why we don’t need to reload the page.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technically..&lt;/strong&gt; &lt;br /&gt;
AJAX is acronym for Asynchronous JavaScript and XML. It uses a host object called XMLHttpRequest to communicate to a server-side script to retrieve data formatted in either JSON, XML, HTML, or plain text.
AJAX, as in its acronym states, is Asynchronous in nature. This means, it can receive data through user interaction or automation event without the need to refresh the page, thus, updating and reloading certain portion of the page.&lt;/p&gt;

&lt;p&gt;There are many ways we can implement AJAX, via jQuery or native JavaScript. Since this is for learning purposes, I am going to use native JavaScript, outline the method, and explain how each objects work.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;A bit of History&lt;/strong&gt; &lt;br /&gt;
To make an HTTP Request to the server, we need to instantiate a class called XMLHttpRequest. Microsoft developed this object called XMLHttp, and then Mozilla developed their own version and called it XMLHttpRequest. Other browsers, Safari, including Microsoft, followed and implemented XMLHttpRequest object as well. If you want to know its history. 
&lt;a href=&quot;https://en.wikipedia.org/wiki/XMLHttpRequest&quot;&gt;Ref: Wikipedia - XMLHttpRequest&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!--&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;  This is just a simple AJAX example.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;  credits to developer.mozilla.org for sample code.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;  comments are explained by me. :-p&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;--&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ajaxButton&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;cursor: pointer; text-decoration: underline&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  Make a request
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    here, we are using an IIFE to wrap our code so our&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    variables and closures doesn&amp;#39;t pollute the global namespace&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;  */&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;httpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;      this is an event handler,&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;      once user clicked on ajaxButton html element,&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;      it will execute the onclick function and call the&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;      makeRequest function with a given &amp;#39;test.html&amp;#39; value on its parameter.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;      the &amp;#39;test.html&amp;#39; url is just a sample api url which we&amp;#39;ll be&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;      making a request from a server and expect a server response.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    */&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ajaxButton&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;makeRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;test.html&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;      MAKING AN HTTP REQUEST&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;makeRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        as mentioned above, we need to instantiate a new class &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        of XMLHttpRequest so we can make a HTTP request to the server.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        we are assigning this class to a variable defined on our&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        outer scope so its accessible throughout our IIFE scope.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;      */&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;httpRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

      &lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        were doing a Feature Detection here.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        as the name implies, we are just checking if&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        XMLHttpRequest host object is NOT available and&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        setting an alert action to notify user if&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        XMLHttpRequest is not available on their browser/environment.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;      */&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;httpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Giving up :( Cannot create an XMLHTTP instance&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        before sending our HTTP server request,&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        we need to set a handler for our server response.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        We can do this by assigning a function to our&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        XMLHttpRequest object property &amp;#39;onreadystatechange&amp;#39;.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        Or&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        We can also assign an anonymous function, so &amp;#39;onreadystatechange&amp;#39;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        doesn&amp;#39;t need to carry a reference to a function.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        But for organization, we will just use the former method.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;      */&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;httpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onreadystatechange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alertContents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        Now that we have set our request server response handler,&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        we&amp;#39;ll need to make the request.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        - 1st parameter, is the HTTP request method (GET, POST, DELETE, etc).&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;          There are other request methods, whichever our server supports.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;          It&amp;#39;s also good practice to define these request methods&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;          in capital letters as per the HTTP standard or there are browsers&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;          (Firefox) that may not be able to process the request.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        - 2nd parameter, is the url for the data we are requesting.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;          Make sure to use the exact domain name or it will throw a &amp;#39;Permission Denied&amp;#39; error.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;          For security purpose, we cannot make a 3rd party request, if needed,&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;          this is a CORS issue,&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;          ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        - 3rd parameter, just sets whether the request is asynchronous. This is&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;          optional and default is set to true.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;      */&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;httpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        As the method name implies, this HTTP request object method opens/sends the request.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        If we are simply doing a &amp;#39;GET&amp;#39; request, we can leave the parameter empty, but&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        if we are &amp;#39;POST&amp;#39;ing data, we can pass in a value formatted in either&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        query string, JSON, SOAP, etc.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;      */&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;httpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

      &lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        NOTE:&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        If we want to POST data, we may need to set the MIME type of the request.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        Ex: httpRequest.setRequestHeader(&amp;#39;Content-Type&amp;#39;, &amp;#39;application/x-www-form-urlencoded&amp;#39;);&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;      */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;      HANDLING THE SERVER RESPONSE&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    */&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;      this is the same function declaration we&amp;#39;ve assigned to &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;      &amp;#39;onreadystatechange&amp;#39; object property above.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alertContents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        this if statement checks for the state of the request.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        if the &amp;#39;readyState&amp;#39; has a value of XMLHttpRequest.DONE (evaluating to 4),&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        it means the server response has been received and its OK for us to continue processing.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#Properties&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;      */&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;httpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readyState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;          Next, we&amp;#39;ll check for HTTP Status Code. Most common HTTP Status Codes I&amp;#39;ve&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;          encountered are 200 OK, 403 Forbidden Error, and 500 Server Error.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;          There is a list of HTTP Status Code available online with description of code.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;          This if statement is just checking for which HTTP Status Code to respond to and&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;          execute code for whatever we want to do with the data.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;httpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;httpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;responseText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;There was a problem with the request.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;          There are 2 options to access data: httpRequest.responseText and httpRequest.responseXML&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;          Step above is only valid if asynchronous is set to true, if not, we don&amp;#39;t need to specify&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;          a function.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        */&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;reference&quot;&gt;&lt;strong&gt;Reference:&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/AJAX/Getting_Started&quot;&gt;What’s AJAX? - Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 22 Jan 2016 02:47:13 -0800</pubDate>
        <link>http://www.wandrr.io/JS-Interview-Question-Explain-AJAX-in-as-much-detail-as-possible</link>
        <guid isPermaLink="true">http://www.wandrr.io/JS-Interview-Question-Explain-AJAX-in-as-much-detail-as-possible</guid>
        
        <category>javascript</category>
        
        <category>interview question</category>
        
        
      </item>
    
      <item>
        <title>When would you use document.write()?</title>
        <description>&lt;h3 id=&quot;when-would-you-use-documentwrite&quot;&gt;When would you use document.write()?&lt;/h3&gt;

&lt;p&gt;When &lt;code&gt;document.write()&lt;/code&gt; is executed after page load, it replaces the entire header and body tag with the given parameter value in string. An invocation could look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;h1&amp;gt;hello world&amp;lt;/h1&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When working with web application, it is uncommon task to overwrite an entire page, hence why using &lt;code&gt;document.write()&lt;/code&gt; is bad practice. It cannot inject string text into a given node point unlike jQuery library selectors and native JavaScript methods.
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document&quot;&gt;Ref: developer.mozilla.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another reason not to use &lt;code&gt;document.write()&lt;/code&gt; is it doesn’t support XHTML, but its not an issue since most web development uses HTML. Since &lt;code&gt;document.write()&lt;/code&gt; fires after a page has finish loading, it causes performance issues and sometimes, may not even fire at all.&lt;/p&gt;

&lt;p&gt;The only seem appropriate usage for &lt;code&gt;document.write()&lt;/code&gt; is when working third parties like Google Analytics and such for including their scripts. This is because &lt;code&gt;document.write()&lt;/code&gt; is mostly available in any browser. Since third party companies have no control over the user’s browser dependencies (ex. jQuery), &lt;code&gt;document.write()&lt;/code&gt; can be used as a fallback or a default method.&lt;/p&gt;
</description>
        <pubDate>Wed, 20 Jan 2016 02:47:13 -0800</pubDate>
        <link>http://www.wandrr.io/JS-Interview-Question-When-would-you-use-document-write</link>
        <guid isPermaLink="true">http://www.wandrr.io/JS-Interview-Question-When-would-you-use-document-write</guid>
        
        <category>javascript</category>
        
        <category>interview question</category>
        
        
      </item>
    
  </channel>
</rss>
