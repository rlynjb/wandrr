<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>wandrr.io</title>
    <description>This is a blog about travel and tech.
</description>
    <link>http://www.wandrr.io/</link>
    <atom:link href="http://www.wandrr.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 18 Mar 2016 12:14:37 -0700</pubDate>
    <lastBuildDate>Fri, 18 Mar 2016 12:14:37 -0700</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Fiddling with Phonegap's Speech Recognition</title>
        <description>&lt;p&gt;Hello! Again this is a continuation of my previous blog posts. I am attempting to develop a simple app while blogging my experience and issues I’ve come across.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/Beginning-mobile-app-development-journey&quot;&gt;Beginning Mobile App Developmet Journey&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/Beginning-Small-Web-App-Development-with-AngularJS&quot;&gt;Beginning Small Web App Development with AngularJS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From my recent blog post &lt;a href=&quot;/Beginning-Small-Web-App-Development-with-AngularJS&quot;&gt;Beginning Small Web App Development with AngularJS&lt;/a&gt;, I was able to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Setup Zurb Foundation for Apps by creating a directory inside of my phonegap project instance.&lt;/li&gt;
  &lt;li&gt;Use Zurb Foundation for Apps project directory for development.&lt;/li&gt;
  &lt;li&gt;Transfer build files to phoengap’s www directory for deployment.&lt;/li&gt;
  &lt;li&gt;Designed and Developed a simple mobile layout and navigation using Zurb Foundation for Apps.&lt;/li&gt;
  &lt;li&gt;Use AJAX to locally fetch a .json file and display data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, I am extending my app by using Speech Recognition. A typical user scenario would be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;App has option to use Voice Recognition or Simple Reload Button&lt;/li&gt;
  &lt;li&gt;If User chose Voice Recogntion, app will enable phone’s voice command sensor&lt;/li&gt;
  &lt;li&gt;When User says ‘shuffle’, app will reload new data&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;plugins-and-documentations&quot;&gt;Plugins and Documentations&lt;/h3&gt;

&lt;p&gt;Cordova provides a documentation for registered plugins &lt;a href=&quot;http://cordova.apache.org/plugins/&quot;&gt;Cordova Official Documentation Plugins&lt;/a&gt;, but I was not able to find the plugin I needed. Instead, I’ve found the ff. on github and youtube:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/oXiel-iZOos&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/macdonst/SpeechRecognitionPlugin&quot;&gt;Github.com: macdonst - Speech Recognition Plugin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Video pretty much explains how speech recognition works and discusses various speech recognition APIs available and its brief history. He also showcased sample code and its use cases.&lt;/p&gt;
</description>
        <pubDate>Wed, 16 Mar 2016 05:38:53 -0700</pubDate>
        <link>http://www.wandrr.io/Fiddling-with-phonegap-speech-recognition</link>
        <guid isPermaLink="true">http://www.wandrr.io/Fiddling-with-phonegap-speech-recognition</guid>
        
        <category>app development</category>
        
        
      </item>
    
      <item>
        <title>Building a Magic Mirror</title>
        <description>&lt;p&gt;Building a magic mirror base from &lt;a href=&quot;http://michaelteeuw.nl/post/80391333672/magic-mirror-part-i-the-idea-the-mirror&quot;&gt;Michael Teeuw - Magic Mirror Project&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 10 Mar 2016 01:54:19 -0800</pubDate>
        <link>http://www.wandrr.io/Building-a-Magic-Mirror</link>
        <guid isPermaLink="true">http://www.wandrr.io/Building-a-Magic-Mirror</guid>
        
        <category>build stuff</category>
        
        
      </item>
    
      <item>
        <title>Beginning Small Web App Development with AngularJS</title>
        <description>&lt;p&gt;This is a continuation of my previous blog post &lt;a href=&quot;/Beginning-mobile-app-development-journey/&quot;&gt;Beginning Mobile App Development Journey&lt;/a&gt; as I further explore Hybrid (Mobile and Web) App Development. On my previous blog post, I have successfully installed PhoneGap and was able to run the default PhoneGap app on my Android phone.&lt;/p&gt;

&lt;p&gt;For this blog post, I’m using AngularJS as my go-to JS Framework for prototyping, developing small apps, and testing with a Front-end framework: &lt;a href=&quot;http://foundation.zurb.com/apps.html&quot;&gt;Zurb Foundation for Apps&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;why-use-zurb-foundation-for-apps-why-not-build-an-app-from-scratch&quot;&gt;Why use Zurb Foundation for Apps? Why not build an app from scratch?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;To avoid spending time on developing the front-end architectural structure of directories and files.&lt;/li&gt;
  &lt;li&gt;To avoid planning and coding front-end workflow and built process&lt;/li&gt;
  &lt;li&gt;To avoid re-coding common JS components, such as Carousel, Modal, etc.&lt;/li&gt;
  &lt;li&gt;To avoid re-coding CSS components, such as Grid system, consistent style of typography, buttons, utilities, etc.&lt;/li&gt;
  &lt;li&gt;To produce a quick prototype to showcase to a prospect client.&lt;/li&gt;
  &lt;li&gt;To further develop the prototype into a production app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Above are reasons base on my personal opinion. There are different scenarios and situations why we use certain techonology and practice certain methodology. Each company comprise of their own development workflow that fits their business process and be able to produce product base on business requirements.&lt;/p&gt;

&lt;p&gt;Following link is a solid and comprehensive response to a Quora question regarding which JavaScript Framework should we spend time learning which, I think also applies to how we approach a project: &lt;a href=&quot;https://www.quora.com/Im-a-bit-lost-in-JavaScript-framework-hell-Should-I-spend-time-learning-backbone-js-or-ember-js-or-can-js-or-angular-js/answer/Michael-Mullany-1?srid=Mz0n&quot;&gt;I’m a bit lost in JavaScript framework hell. Should I spend time learning backbone.js or ember.js or can.js or angular.js?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But if you are someone who is learning Front-End workflow, built process, and such concepts, I wouldn’t recommend Zurb Foundation as it is an &lt;strong&gt;automagic&lt;/strong&gt; framework, thus, preventing you from actual coding and structuring files. If given the time and resources, I honestly would still code in Vanilla JavaScript or choose a framework with less ‘automagic’ nature.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;details-of-angularjs-on-zurb-foundation-for-apps&quot;&gt;Details of AngularJS on Zurb Foundation for Apps&lt;/h3&gt;

&lt;p&gt;This blog post will only cover the AngularJS part of the framework. If you want to know how to setup and know more about the framework. Visit: &lt;a href=&quot;http://foundation.zurb.com/apps.html&quot;&gt;Zurb - Foundation for Apps&lt;/a&gt;. Below are main AngularJS functionalities that Foundation as integrated unto their framework that comprise the basis of Web Application:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#dynamic-routing&quot;&gt;Dynamic Routing&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#settings-inside-a-template-file&quot;&gt;name, url, animationIn, animationOut, parent, controller, abstract&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#angular-includes&quot;&gt;Angular Includes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#enabling-html5-mode-and-working-with-angular-on-a-server&quot;&gt;Enabling HTML5 Mode and working with Angular on a server&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#angular-and-ui-router-helpers&quot;&gt;Angular and UI Router Helpers&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#angular-and-ui-router-helpers&quot;&gt;ui-sref, ui-sref-active&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;dynamic-routing&quot;&gt;Dynamic Routing&lt;/h2&gt;

&lt;p&gt;These are the Views and State of a single-page apps. When approaching a project, initial step is we usually defined the url and template of an application. In Foundation for Apps - AngularJS, we approached this as follows:&lt;/p&gt;

&lt;p&gt;Inside &lt;code&gt;clients &amp;gt; templates&lt;/code&gt; directory is where we create our templates and define our routes and settings in YAML front-matter block format.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Foundation App directory structure&lt;/span&gt;

app
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;-- bower_components
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;-- build
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;-- client
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;-- assets
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;-- templates &lt;span class=&quot;c&quot;&gt;# where we create our templates&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;-- home.html
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;-- index.html
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;-- etc
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;-- node_modules
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;-- .bowerrc
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;-- .gitignore
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;-- bower.json
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;-- gulpfile.js
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;-- package.json
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;-- readme.md&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;settings-inside-a-template-file&quot;&gt;Settings inside a Template file&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# YAML Front-matter block inside templates&lt;/span&gt;

---
name: parent.child
  &lt;span class=&quot;c&quot;&gt;# *required&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# The name of the view.&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# Refer to this when using ui-sref to link between views.&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# It can also use ui-router&amp;#39;s dot notation to indicate a child view.&lt;/span&gt;
url: /child/:id
  &lt;span class=&quot;c&quot;&gt;# *required&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# Defines the URL at which a page can be directly accessed.&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# When setting up a child view, the segment of the URL for the parent view will be inserted automatically.&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# In the above example, the final URL is /parent/child.&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# A URL can also contain parameters - `/:id`, which will be passed to the view&amp;#39;s controller when it loads.&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# Learn more about URL parameters on ui-router&amp;#39;s documentation.&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# https://github.com/angular-ui/ui-router/wiki/URL-Routing#url-parameters&lt;/span&gt;
animationIn: fadeIn
animationOut: fadeOut
  &lt;span class=&quot;c&quot;&gt;# Sets a transition to play when the view animates in or out.&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# Refer to the Motion UI documentation for the list of built-in transitions.&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# http://foundation.zurb.com/apps/docs/#!/motion-ui&lt;/span&gt;
parent: name_of_parent_view
  &lt;span class=&quot;c&quot;&gt;# You can use this as an alternative to the parent.child syntax.&lt;/span&gt;
controller: NameOfController
  &lt;span class=&quot;c&quot;&gt;# Description below&lt;/span&gt;
abstract: true_or_false
  &lt;span class=&quot;c&quot;&gt;# Defines a state as abstract. Abstract states can have child states, but can&amp;#39;t be navigated to directly.&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# Check out the ui-router documentation to learn more.&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# https://github.com/angular-ui/ui-router/wiki/Nested-States-%26-Nested-Views#abstract-states&lt;/span&gt;
---&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;controller&lt;/strong&gt;&lt;br /&gt;
Once a View is defined, it uses a controller called &lt;code&gt;DefaultController&lt;/code&gt;, but this can be overriden by defining your own controller on the template front-matter settings, though, 
overriding disables front-matter settings (except dynamic routing). If you want to use your own controller AND keep this feature, you can extend the &lt;code&gt;DefaultController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;DefaultController&lt;/code&gt; passes a bunch of data through. For instance, all of your front-matter settings will be accessible via &lt;code&gt;vars&lt;/code&gt; in your template. &lt;code&gt;angular&lt;/code&gt; will return the name of your route while &lt;code&gt;templates/angular.html&lt;/code&gt; will return the relative path to the template.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;application&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;MyController&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;MyController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$inject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;$scope&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;$stateParams&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;$state&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;$controller&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$stateParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;DefaultController&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$stateParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$stateParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Your code...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;angular-includes&quot;&gt;Angular Includes&lt;/h2&gt;

&lt;p&gt;If a template becomes complex, we can break it further into &lt;strong&gt;partial&lt;/strong&gt; templates and use &lt;strong&gt;Angular Includes&lt;/strong&gt; - &lt;code&gt;ng-includes&lt;/code&gt; to inject into its parent template.
The use of single quotes inside the double quotes is &lt;strong&gt;required&lt;/strong&gt;. The HTML inside the partial will be placed inside the element with &lt;code&gt;ng-include&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-include=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;#39;path/to/partial.html&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;enabling-html5-mode-and-working-with-angular-on-a-server&quot;&gt;Enabling HTML5 Mode and working with Angular on a server&lt;/h2&gt;

&lt;p&gt;In single-page application, web pages do not reload rather they use hashtags to navigate throughout the application. Usually, sub urls are prefixed by &lt;code&gt;#/&lt;/code&gt; by default in any JavaScript framework or Vanilla JavaScript. AngularJS has a feature &lt;code&gt;$locationProvider&lt;/code&gt; that we can configure to display clean url. But to enable HTML5 Mode feature, the server that the app resides needs to support url rewrite.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;angular-and-ui-router-helpers&quot;&gt;Angular and UI Router Helpers&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ui-sref&lt;/code&gt;&lt;br /&gt;
Foundation for Apps uses UI Router for its routing which allows for named route references.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ui-sref-active&lt;/code&gt;, &lt;code&gt;ui-sref-active-eq&lt;/code&gt;&lt;br /&gt;
If we have a list of menu links, Foundation for Apps also provides two subtle distinct directives that determines which link is active.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!--&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;  we created a template and defined front-matter settings&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;--&amp;gt;&lt;/span&gt;
---
name: mypage
url: my/sub/page
---

&lt;span class=&quot;c&quot;&gt;&amp;lt;!--&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;  We can easily linked this template from another page by using `name`&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ui-sref-active=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;my-active-class&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ui-sref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;mypage&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;my page&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ui-sref-active=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;my-active-class&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ui-sref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;my2ndpage&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;my 2nd page&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!--&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;  ui-sref can also take in parameters for pages that accept parameters&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;--&amp;gt;&lt;/span&gt;
---
name: inbox.message
url: inbox/:id
---

&lt;span class=&quot;c&quot;&gt;&amp;lt;!--&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;  and can be accessed by JSON&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ui-sref-active-eq=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;my-active-class&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ui-sref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;inbox.message({ id: 4 })&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;5th message&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ui-sref-active-eq=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;my-active-class&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ui-sref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;inbox.message({ id: 5 })&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;5th message&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;further-reading&quot;&gt;&lt;strong&gt;Further reading&lt;/strong&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.fromdev.com/2015/06/best-books-for-angularjs.html&quot;&gt;Best books for AngularJS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://shop.oreilly.com/product/0636920040156.do&quot;&gt;Frontend Architecture for Design Systems By Micah Godbolt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 04 Mar 2016 02:43:10 -0800</pubDate>
        <link>http://www.wandrr.io/Beginning-Small-Web-App-Development-with-AngularJS</link>
        <guid isPermaLink="true">http://www.wandrr.io/Beginning-Small-Web-App-Development-with-AngularJS</guid>
        
        <category>javascript</category>
        
        <category>app development</category>
        
        
      </item>
    
      <item>
        <title>Vanilla JavaScript Router and Templating</title>
        <description>&lt;p&gt;I’m working on a simple app that requires a vanilla JavaScript routing system. Did some readings and it turns out there are various ways we can implement a vanilla JS routing system, but I will only mention 3 common methods:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window.onhashchange&quot;&gt;onhashchange event&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window.onload&quot;&gt;onload event&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;I believe is the simplest method so far.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API&quot;&gt;HTML5 History API&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Still buggy for cross-browser compatibility&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Using small JS plugin called &lt;a href=&quot;https://github.com/browserstate/history.js&quot;&gt;History.js&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;This extends HTML5 History API and fixes cross-browser compatibility issues.&lt;/li&gt;
      &lt;li&gt;More info on their &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window.onload&quot;&gt;Github Gist - Intelligent State Handling&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For this app project, I will use the first method. Thanks to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://joakim.beng.se/blog/posts/a-javascript-router-in-20-lines.html&quot;&gt;Joakim Carlstein’s - A JavaScript router in 20 lines&lt;/a&gt; and&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ejohn.org/blog/javascript-micro-templating/&quot;&gt;John Resig’s - JavaScript Micro-Templating&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;why-go-this-route&quot;&gt;Why go this Route?&lt;/h3&gt;

&lt;p&gt;Both each scripts only contains 20 lines of code, overall, its about 40 lines of code compare to using a 3rd-party JS plugin. I wanted to keep my code simple and understanding these scripts source code is easy. Its also a good way to learn Routing and Templating system as well. At the moment, I am not concern about cross-browser compatibility and other issues that may arise.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;For complete example:&lt;/strong&gt;&lt;/p&gt;

&lt;p data-height=&quot;268&quot; data-theme-id=&quot;20698&quot; data-slug-hash=&quot;RaNGvZ&quot; data-default-tab=&quot;result&quot; data-user=&quot;rlynjb&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/rlynjb/pen/RaNGvZ/&quot;&gt;vanilla javascript routing&lt;/a&gt; by rlynjb (&lt;a href=&quot;http://codepen.io/rlynjb&quot;&gt;@rlynjb&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;update-03-04-2016&quot;&gt;&lt;strong&gt;Update: 03-04-2016&lt;/strong&gt;&lt;/h5&gt;

&lt;h3 id=&quot;delegated-events---click-event-doesnt-work-on-dynamically-generated-elements&quot;&gt;Delegated Events - Click event doesn’t work on dynamically generated elements&lt;/h3&gt;

&lt;p&gt;This was an issue I’ve come across while using this script. When binding a &lt;code&gt;click&lt;/code&gt; event unto a dynamically generated element, we need to delegate that certain element to its parent element that holds the dynamically generated chiild elements.&lt;/p&gt;

&lt;p&gt;Code would look as follows, using jQuery &lt;code&gt;on&lt;/code&gt; event:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;#view&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;button#shuffle&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;#view&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h5 id=&quot;references&quot;&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/6658752/click-event-doesnt-work-on-dynamically-generated-elements&quot;&gt;Click event doesn’t work on dynamically generated elements&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/8827430/event-delegation-vs-direct-binding-when-adding-complex-elements-to-a-page&quot;&gt;event delegation vs direct binding when adding complex elements to a page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 29 Feb 2016 04:42:24 -0800</pubDate>
        <link>http://www.wandrr.io/Vanilla-Javascript-Router-and-Templating</link>
        <guid isPermaLink="true">http://www.wandrr.io/Vanilla-Javascript-Router-and-Templating</guid>
        
        <category>javascript</category>
        
        
      </item>
    
      <item>
        <title>Beginning Mobile App Development Journey</title>
        <description>&lt;p&gt;Consider this blog post as my notes on learning how to setup PhoneGap/Cordova locally, build and debug via PhoneGap Build.
If you want to know more about its history and detailed instructions, refer to this book: &lt;a href=&quot;https://www.packtpub.com/application-development/phonegap-3x-mobile-application-development-hotshot&quot;&gt;Packtpub: PhoneGap Mobile Application Development Hotshot&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I’ve been searching for a Mobile App Framework on which I can use languages I’m comfortable with (HTML, CSS, JavaScript) and also will be able to deploy on various devices utilizing native device sensors and functionalities.
I know performance will be an issue when using Mobile App Framework, but considering our usual project scope, given the timeframe and number of developers, using Mobile App Framework sounds proper.&lt;/p&gt;

&lt;h3 id=&quot;why-choose-phonegap&quot;&gt;Why choose PhoneGap?&lt;/h3&gt;

&lt;p&gt;It’s opensouce MIT license! and since Cordova powers PhoneGap, I might as well take advantage of the additional features that PhoneGap offers: PhoneGap Build! (this is to avoid installing and configuring any platform SDKs locally)&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Install node.js
    &lt;ul&gt;
      &lt;li&gt;From experience, node.js versions and path can get complicated, I recommended installing node.js via &lt;code&gt;nvm&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;install PhoneGap (includes PhoneGap CLI)
    &lt;ul&gt;
      &lt;li&gt;Adding the PhoneGap CLI enables the use of Adobe’s remote building capabilities, which means you don’t need to have the platform SDKs installed in order to build your app. (There are caveats here; it is best to refer to the PhoneGap Build website at http://build.phonegap.com for more information.) Installing PhoneGap CLI will also install Cordova CLI, since PhoneGap is powered by Cordova engine.&lt;/li&gt;
      &lt;li&gt;Install via npm: &lt;code&gt;sudo npm install -g phonegap&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Check if installed: &lt;code&gt;phonegap --version&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;starting-a-project-and-workflow&quot;&gt;Starting a project and Workflow&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#create-first-project&quot;&gt;Create first project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#manage-projects-platforms&quot;&gt;Manage project’s platforms&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#manage-projects-plugins&quot;&gt;Manage project’s plugins&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#building-our-project&quot;&gt;Build my project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#deploy-project-to-a-simulatordevice&quot;&gt;Deploy project to the simulator/device&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;two-environments&quot;&gt;Two Environments&lt;/h3&gt;

&lt;p&gt;The PhoneGap command consists of two environments. The first is the local command environment. The local commands execute the command on your local machine. In this case, you must have the target device SDKs configured on your machine. For example, if you want to develop an Android application, you must acquire and configure the Android SDK on your machine.&lt;/p&gt;

&lt;p&gt;The second environment is remote. Command-line commands execute the build process remotely using the cloud-based PhoneGap Build service. In this case, you don’t need to configure any SDK on your local machine.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I will only focus on remote commands, so I don’t need to setup various platform SDKs locally&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Remote Commands via PhoneGap Build&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sign up an account: &lt;a href=&quot;http://build.phonegap.com&quot;&gt;http://build.phonegap.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Login via CLI: &lt;code&gt;phonegap remote login&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;create-first-project&quot;&gt;Create first project&lt;/h3&gt;

&lt;p&gt;To create a project with PhoneGap CLI, &lt;code&gt;cd&lt;/code&gt; to your projects directory (ex. &lt;code&gt;/www&lt;/code&gt; or &lt;code&gt;/home&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Run: &lt;code&gt;phonegap create hello com.myapp.hello HelloWorld&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;First argument &lt;code&gt;hello&lt;/code&gt; specifies a directory for our project.&lt;br /&gt;
Second argument &lt;code&gt;com.myapp.hello&lt;/code&gt; is our application ID. Its in reverse domain style. We can create something like &lt;code&gt;com.yourdomain.applicationname&lt;/code&gt;&lt;br /&gt;
Third argument &lt;code&gt;HelloWorld&lt;/code&gt; is our application name. This will be use as the application’s display title. Its optional. If you are not setting the application name, it will use the name from the first argument. If you want to change the name, you can open config.xml and edit the name element.&lt;/p&gt;

&lt;p&gt;Contains: Our code, Other platform-specific code, Other assets required to generate an app ready for you to run on a simulator or device&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;manage-projects-platforms&quot;&gt;Manage project’s platforms&lt;/h3&gt;

&lt;p&gt;PhoneGap Build, remote-based build automatically creates an iOs, Android, and Windows build for you.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;manage-projects-plugins&quot;&gt;Manage project’s plugins&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;For list of available plugins via PhoneGap Build:&lt;/strong&gt; &lt;a href=&quot;https://build.phonegap.com/plugins&quot;&gt;https://build.phonegap.com/plugins&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To install plugins:&lt;/strong&gt; &lt;code&gt;phonegap plugin add &amp;lt;source&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once a plugin has been successfully added to a project, the plugin APIs can be executed using JavaScript. Each plugin has its own way of accessing native APIs, so read the documentation for each plugin.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listing plugins:&lt;/strong&gt; &lt;code&gt;phonegap plugin list&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Removing plugins:&lt;/strong&gt; &lt;code&gt;phonegap plugin remove &amp;lt;id&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;building-our-project&quot;&gt;Building our project&lt;/h3&gt;

&lt;p&gt;PhoneGap Build compiles our application code and plugins only available in PhoneGap Build and builds our application in iOs, Android, and Windows.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To build project remotely via PhoneGap Build:&lt;/strong&gt;&lt;br /&gt;
&lt;code&gt;phonegap remote build &amp;lt;platform&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;deploy-project-to-a-simulatordevice&quot;&gt;Deploy project to a simulator/device&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Running and Debugging Remote:&lt;/strong&gt;&lt;br /&gt;
&lt;code&gt;phonegap remote run &amp;lt;platform&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Refer to &lt;a href=&quot;http://docs.build.phonegap.com/en_US/index.html&quot;&gt;PhoneGap Build Documentation for instructions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Simulating with Ripple Emulator (locally):&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Install &lt;a href=&quot;https://chrome.google.com/webstore/detail/ripple-emulator-beta/geelfhphabnejjhdalkjhgipohgpdnoc?hl=en&quot;&gt;Ripple Emulator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Enable it&lt;/li&gt;
  &lt;li&gt;Run &lt;code&gt;phonegap serve&lt;/code&gt; to retrieve address&lt;/li&gt;
  &lt;li&gt;Enter local address to Ripple Emulator&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Notes on Submitting to app stores&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A Mac is required to generate the certificates necessary for iOS app signing (even with PhoneGap Build) and is definitely required for deployment to the App Store. The same is true for Windows; you need to deploy to the App Store from Windows only.&lt;/p&gt;

</description>
        <pubDate>Fri, 26 Feb 2016 05:14:59 -0800</pubDate>
        <link>http://www.wandrr.io/Beginning-mobile-app-development-journey</link>
        <guid isPermaLink="true">http://www.wandrr.io/Beginning-mobile-app-development-journey</guid>
        
        <category>app development</category>
        
        
      </item>
    
      <item>
        <title>What is the difference between == and ===?</title>
        <description>&lt;p&gt;JavaScript has two sets of &lt;strong&gt;&lt;em&gt;Equality operators&lt;/em&gt;&lt;/strong&gt; archived under &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators&quot;&gt;Comparison operators&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;equality &lt;code&gt;==&lt;/code&gt; &amp;amp; inequality &lt;code&gt;!=&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;strict equality &lt;code&gt;===&lt;/code&gt; &amp;amp; strict inequality &lt;code&gt;!==&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We use these operators when comparing 2 operands. They differ on what type of operands are being compared to against.&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;references&quot;&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/359494/does-it-matter-which-equals-operator-vs-i-use-in-javascript-comparisons&quot;&gt;Does it matter which equals operator (== vs ===) I use in JavaScript comparisons?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators&quot;&gt;Comparison operators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 23 Feb 2016 07:15:38 -0800</pubDate>
        <link>http://www.wandrr.io/Difference-between-double-and-triple-equals</link>
        <guid isPermaLink="true">http://www.wandrr.io/Difference-between-double-and-triple-equals</guid>
        
        <category>javascript interview questions</category>
        
        
      </item>
    
      <item>
        <title>Difference between document load event and document ready event?</title>
        <description>&lt;p&gt;&lt;code&gt;window.onload&lt;/code&gt; event fires only when contents (images, css, scripts, other 3rd party sources), including the DOM has finished loading.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$(document).ready()&lt;/code&gt; event fires when the HTML DOM has finished loading. It also fires earlier than &lt;code&gt;window.onload&lt;/code&gt;. It will not wait for contents to load.&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;references&quot;&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/3698200/window-onload-vs-document-ready&quot;&gt;window.onload vs $(document).ready()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 23 Feb 2016 07:08:26 -0800</pubDate>
        <link>http://www.wandrr.io/JS-Interview-Question-Difference-between-document-load-event-and-document-ready-event</link>
        <guid isPermaLink="true">http://www.wandrr.io/JS-Interview-Question-Difference-between-document-load-event-and-document-ready-event</guid>
        
        <category>javascript interview questions</category>
        
        
      </item>
    
      <item>
        <title>Why is extending built-in JavaScript objects not a good idea?</title>
        <description>&lt;p&gt;From what I understand, extending built-in JavaScript objects is most likely an opinion-base rather than facts.
Before delving into its reasons why its not a good idea to extend built-in JS objects, I will tackle its purpose first to gain an understanding how it works and why its controversial.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;JS comes with essential built-in objects which we can utilize for text, numbers, boolean, data, dates, and much more. As we become familiar with these built-in objects, we’ll find ourselves wanting to do more than what JS provides, that’s where we create our custom built-in objects, hence, &lt;strong&gt;&lt;em&gt;“Extending built-in JS objects”&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As an example, we can easily encapsulate our code using a function.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;regexIt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// do something with input and&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and use it by invoking &lt;code&gt;regexIt&lt;/code&gt; function and passing in an argument, as shown below:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello World&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;regexIt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, let’s say for instance, this function has become so useful that it should be part of JS String object methods. You know, how JS String has &lt;code&gt;replace()&lt;/code&gt;, &lt;code&gt;indexOf()&lt;/code&gt;, &lt;code&gt;slice()&lt;/code&gt;, &lt;code&gt;substring()&lt;/code&gt;, &lt;code&gt;toUpperCase()&lt;/code&gt;, &lt;code&gt;toLowerCase()&lt;/code&gt;, &lt;code&gt;split()&lt;/code&gt;, just to name a few popular ones. We use these methods as shown below:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello World, Foo Bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If we want our &lt;code&gt;regexIt&lt;/code&gt; function to become a method of JS String object, meaning, to be able to use it like this, &lt;code&gt;foo.regexIt()&lt;/code&gt; instead of &lt;code&gt;regexIt(foo)&lt;/code&gt;, we’ll need to use &lt;strong&gt;prototype&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;prototype&quot;&gt;prototype&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;prototype&lt;/code&gt; let’s us insert our custom function to these JS Objects. All objects in JS contains a &lt;code&gt;prototype&lt;/code&gt; property, even the variables we declare. Since we don’t have access to the JS source code, thus, we cannot insert our custom functionality in &lt;code&gt;String&lt;/code&gt; object by fiddling with JS source code, we use the &lt;code&gt;String&lt;/code&gt; object’s &lt;code&gt;prototype&lt;/code&gt; as another approach to insert our functionality.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;regexIt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    Since were attaching our custom function to String object,&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    we don&amp;#39;t need an argument instead, we use &amp;#39;this&amp;#39; to access our argument&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    as it points to the String value attached.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;  */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// do something with input and&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, we can use our &lt;code&gt;regexIt&lt;/code&gt; method as shown below:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello World&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;regexIt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is because the prototype property provides you with direct access to your String’s insides.
Best of all, any new arrays you create will also have access to the shuffle functionality by default thanks to how prototype inheritance works.
- kirupa&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;controversials&quot;&gt;Controversials&lt;/h3&gt;

&lt;p&gt;We’ve seen how easy it is to extend a built-in object’s functionality by declaring properties and methods, but there are contradictions to this practice.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JavaScript may implement their own version of your custom method in the future (using the same name) and this will override your custom method.&lt;/li&gt;
  &lt;li&gt;Modifying the behaviour of current built-in JS objects is not a good practice as it breaks its default functionality and it will break your code using that specific built-in JS object method or property.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When it comes down to extending a built-in JS object, it seems like you just use your best judgement. With given scenarios above, its easy to spot what should be avoided and what are the best approach to fix an issue.&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;references&quot;&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.kirupa.com/html5/extending_built_in_objects_javascript.htm&quot;&gt;Extending Built-In Objects in Javascript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 23 Feb 2016 05:04:54 -0800</pubDate>
        <link>http://www.wandrr.io/JS-Interview-Question-Why-is-extending-built-in-JavaScript-objects-not-a-good-idea</link>
        <guid isPermaLink="true">http://www.wandrr.io/JS-Interview-Question-Why-is-extending-built-in-JavaScript-objects-not-a-good-idea</guid>
        
        <category>javascript interview questions</category>
        
        
      </item>
    
      <item>
        <title>What's the difference between an 'attribute' and a 'property'?</title>
        <description>&lt;h3 id=&quot;recalling-basics-of-javascript&quot;&gt;recalling basics of JavaScript&lt;/h3&gt;

&lt;p&gt;Everything in JavaScript is an object. These objects are categorized in different types (functions, boolean, string, number, etc) and can also contain properties and methods.
Objects doesn’t just exist in the language itself (JavaScript), but in Browser Object Model (BOM) and Document Object Model (DOM) as well. &lt;a href=&quot;http://javascript.info/tutorial/browser-environment&quot;&gt;More info on browser environment&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;objects-in-dom&quot;&gt;objects in DOM&lt;/h3&gt;

&lt;p&gt;Every element in the DOM is an object and these objects have properties as well. These properties are mapped to a set of attributes from an &lt;code&gt;html&lt;/code&gt; markups. An attribute is just a string in an element (usually, &lt;code&gt;label='value'&lt;/code&gt; pair).&lt;/p&gt;

&lt;p&gt;Some of the element’s properties get their initial values from attributes with the same or similar names. Some examples below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;href&lt;/strong&gt; property gets its initial value from the &lt;code&gt;href&lt;/code&gt; attribute, but there is an interpretation involved.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;className&lt;/strong&gt; property gets its value from &lt;code&gt;class&lt;/code&gt; attribute.&lt;/li&gt;
  &lt;li&gt;other properties get their initial values in other ways.&lt;/li&gt;
  &lt;li&gt;an element always has a &lt;strong&gt;style&lt;/strong&gt; property, whether it has a &lt;code&gt;style&lt;/code&gt; attribute or not.&lt;/li&gt;
  &lt;li&gt;a number of properties write back to the attribute they derived from if you set them, but some may have an interpretation involved. Example: &lt;code&gt;href&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider example below for points above.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// html element markup&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo.html&amp;#39;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;test one&amp;#39;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;fooAnchor&amp;#39;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;fooAnchor&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/a&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// element object&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+-------------------------------------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;                                         &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+-------------------------------------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;      &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://example.com/foo.html&amp;quot;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;      &lt;span class=&quot;s2&quot;&gt;&amp;quot;fooAnchor&amp;quot;&lt;/span&gt;                    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;        &lt;span class=&quot;s2&quot;&gt;&amp;quot;fooAnchor&amp;quot;&lt;/span&gt;                    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;test one&amp;quot;&lt;/span&gt;                     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;                               &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo.html&amp;quot;&lt;/span&gt;                      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&amp;quot;fooAnchor&amp;quot;&lt;/span&gt;                     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;fooAnchor&amp;quot;&lt;/span&gt;                     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;test one&amp;quot;&lt;/span&gt;                      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+-------------------------------------------+&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Most of the time, its better to work with properties. Their values and names tend to be consistent across browsers.
We’ll only work with attributes when there is no properties set, example is custom attributes &lt;code&gt;data-foobar&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;references&quot;&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://javascript.info/tutorial/browser-environment&quot;&gt;Browser environment&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/5874652/prop-vs-attr/5884994#5884994&quot;&gt;.prop() vs .attr()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jquery-howto.blogspot.com/2011/06/html-difference-between-attribute-and.html&quot;&gt;HTML: The difference between attribute and property&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 03 Feb 2016 04:41:57 -0800</pubDate>
        <link>http://www.wandrr.io/JS-Interview-Question-Whats-the-difference-between-an-attribute-and-a-property</link>
        <guid isPermaLink="true">http://www.wandrr.io/JS-Interview-Question-Whats-the-difference-between-an-attribute-and-a-property</guid>
        
        <category>javascript interview questions</category>
        
        
      </item>
    
      <item>
        <title>Describe event bubbling</title>
        <description>&lt;p&gt;Event bubbling is when handlers on a nested DOM are triggered starting from the child element up to its parent element.&lt;/p&gt;

&lt;p&gt;This means, eventhough we clicked on a child element, its parent element which contains a handler, will be triggered as well. That’s why it’s called &lt;strong&gt;Event bubbling&lt;/strong&gt;, it is triggered from innermost child element that has been clicked up through topmost parent element.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;this-and-eventtarget&quot;&gt;this and event.target&lt;/h3&gt;

&lt;p&gt;When the innermost child element has been triggered, the event is called &lt;em&gt;‘the target’&lt;/em&gt;, &lt;em&gt;‘the originating element’&lt;/em&gt;, or &lt;code&gt;event.target&lt;/code&gt;. Internet Explorer uses &lt;code&gt;event.srcElement&lt;/code&gt; while all W3C-compliant browsers use &lt;code&gt;event.target&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Cross-browser code usually looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;srcElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When handlers on its topmost parent elements are triggered, the event is called &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So when a Event Bubble occurs, &lt;code&gt;this&lt;/code&gt; object changes its value going from innermost triggered child element to its topmost parent element, while &lt;code&gt;event.target&lt;/code&gt; contains the same value as it holds &lt;em&gt;‘the originating element’&lt;/em&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;stop-the-event-bubbling&quot;&gt;stop the event bubbling&lt;/h3&gt;

&lt;p&gt;An event bubble will occur as long as its topmost element contains a handler, even in &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element.
We can stop the event bubbling in a certain handler by invoking the following method:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// For W3C-compliant browsers&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stopPropagation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// For IE&amp;lt;9&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cancelBubble&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Cross-browser code:&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// cross-browser event;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stopPropagation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// W3C standard variant&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stopPropagation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// IE variant&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cancelBubble&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is a one-line variant:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stopPropagation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stopPropagation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cancelBubble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;* Multiple handlers, initiated in the same element, will get executed.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There is a reverse version of Event Bubbling called ‘Capturing’, but I will not go further into it. You can click on the link below for more info.&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;references&quot;&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://javascript.info/tutorial/bubbling-and-capturing&quot;&gt;Bubbling and capturing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 02 Feb 2016 04:08:15 -0800</pubDate>
        <link>http://www.wandrr.io/JS-Interview-Question-Describe-event-bubbling</link>
        <guid isPermaLink="true">http://www.wandrr.io/JS-Interview-Question-Describe-event-bubbling</guid>
        
        <category>javascript interview questions</category>
        
        
      </item>
    
  </channel>
</rss>
